name: Teacher Verification Batch - Dev

on:
  schedule:
    # 매년 3월 1일, 9월 1일 자정 (KST) = UTC 15:00
    - cron: '0 15 1 3,9 *'
  workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  LAMBDA_FUNCTION_NAME: edukit-batch-teacher-verification-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev # dev 환경 사용
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop # develop 브랜치에서 코드 체크아웃

      - name: Check if running on develop branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/develop" ]; then
            echo "❌ This workflow only runs on develop branch"
            echo "Current branch: ${{ github.ref }}"
            exit 1
          fi
          echo "✅ Running on develop branch - proceeding with batch execution"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create application.yml from secrets
        run: |
          mkdir -p edukit-batch/src/main/resources
          echo '${{ secrets.BATCH_APPLICATION_YML }}' > edukit-batch/src/main/resources/application-dev.yml 

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build batch JAR
        run: ./gradlew :edukit-batch:bootJar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Package JAR and Check Size
        run: |
          cd edukit-batch/build/libs
          JAR_FILE="app-batch.jar"
          echo "📦 Using JAR file: $JAR_FILE"
          
          echo "📊 JAR 파일 크기:"
          ls -lh $JAR_FILE
          
          zip lambda-deployment.zip $JAR_FILE
          
          echo "🗜️ ZIP 파일 크기:"
          ls -lh lambda-deployment.zip
          
          ZIP_SIZE=$(stat -f%z lambda-deployment.zip 2>/dev/null || stat -c%s lambda-deployment.zip)
          ZIP_SIZE_MB=$((ZIP_SIZE / 1024 / 1024))
          
          if [ $ZIP_SIZE -gt 52428800 ]; then
            echo "⚠️ ZIP 파일이 50MB를 초과합니다: ${ZIP_SIZE_MB}MB"
            echo "컨테이너 이미지 배포를 고려해보세요."
            exit 1
          else
            echo "✅ ZIP 파일 크기 OK: ${ZIP_SIZE_MB}MB"
          fi

      - name: Deploy to Lambda
        run: |
          cd edukit-batch/build/libs
          aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-deployment.zip
          
          echo "✅ Lambda deployment completed"

      - name: Wait for Lambda deployment
        run: |
          echo "⏳ Waiting for Lambda deployment to complete..."
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
          echo "✅ Lambda function updated successfully"

      - name: Execute Teacher Verification Batch
        run: |
          echo "🚀 Starting batch execution..."
          aws lambda invoke \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            response.json
          
          echo "📄 Lambda execution response:"
          cat response.json
          
          STATUS_CODE=$(aws lambda invoke \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            --query 'StatusCode' \
            --output text \
            /tmp/response.json)
          
          echo "Lambda Status Code: $STATUS_CODE"
          
          if [ "$STATUS_CODE" == "200" ]; then
            echo "✅ Batch execution completed successfully"
          else
            echo "❌ Batch execution failed with status code: $STATUS_CODE"
            exit 1
          fi

      - name: Notify completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Teacher verification batch completed successfully on $(date)"
          else
            echo "💥 Teacher verification batch failed on $(date)"
          fi
