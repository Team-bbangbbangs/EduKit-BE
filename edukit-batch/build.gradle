plugins {
    id 'org.springframework.boot'
}

dependencies {
    // 내부 모듈 의존성 (최소화)
    implementation(project(':edukit-core')) {
        exclude group: 'io.jsonwebtoken'
        exclude group: 'org.mindrot', module: 'jbcrypt'
    }

    implementation(project(':edukit-external')) {
        exclude group: 'org.springframework.ai'
        exclude group: 'software.amazon.awssdk', module: 's3'
        exclude group: 'io.github.resilience4j'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-redis'
        exclude group: 'io.projectreactor.netty', module: 'reactor-netty-http'
    }

    // AWS Lambda 핵심 (애플리케이션과 함께 패키징)
    implementation 'com.amazonaws:aws-lambda-java-core:1.3.0'
    implementation 'com.amazonaws:aws-lambda-java-events:3.16.1'
}

// Layer별 의존성 분류 함수
def classifyDependency = { fileName ->
    if (fileName.startsWith('edukit-') || fileName.contains('aws-lambda-java-')) {
        return 'APPLICATION'
    } else if (fileName.contains('spring-') || fileName.contains('springframework')) {
        return 'SPRING'
    } else if (fileName.contains('mysql') || fileName.contains('hibernate') ||
            fileName.contains('jpa') || fileName.contains('jdbc') ||
            fileName.contains('datasource') || fileName.contains('transaction')) {
        return 'DATABASE'
    } else if (fileName.contains('aws-') && !fileName.contains('lambda') ||
            fileName.contains('ses') || fileName.contains('s3') ||
            fileName.contains('thymeleaf')) {
        return 'EXTERNAL'
    } else if (fileName.contains('jackson') || fileName.contains('logback') ||
            fileName.contains('slf4j') || fileName.contains('logstash') ||
            fileName.contains('json')) {
        return 'UTILS'
    } else {
        return 'OTHER'
    }
}

// Spring Framework Layer 생성
tasks.register('buildSpringLayer', Copy) {
    from configurations.runtimeClasspath
    into 'build/layers/spring/java/lib'

    include { details ->
        classifyDependency(details.file.name) == 'SPRING'
    }

    doFirst {
        delete 'build/layers/spring'
        mkdir 'build/layers/spring/java/lib'
    }
}

// Database Layer 생성
tasks.register('buildDatabaseLayer', Copy) {
    from configurations.runtimeClasspath
    into 'build/layers/database/java/lib'

    include { details ->
        classifyDependency(details.file.name) == 'DATABASE'
    }

    doFirst {
        delete 'build/layers/database'
        mkdir 'build/layers/database/java/lib'
    }
}

// External Integration Layer 생성
tasks.register('buildExternalLayer', Copy) {
    from configurations.runtimeClasspath
    into 'build/layers/external/java/lib'

    include { details ->
        classifyDependency(details.file.name) == 'EXTERNAL'
    }

    doFirst {
        delete 'build/layers/external'
        mkdir 'build/layers/external/java/lib'
    }
}

// Utils Layer 생성
tasks.register('buildUtilsLayer', Copy) {
    from configurations.runtimeClasspath
    into 'build/layers/utils/java/lib'

    include { details ->
        classifyDependency(details.file.name) == 'UTILS'
    }

    doFirst {
        delete 'build/layers/utils'
        mkdir 'build/layers/utils/java/lib'
    }
}

// 모든 Layer 빌드
tasks.register('buildAllLayers') {
    dependsOn buildSpringLayer, buildDatabaseLayer, buildExternalLayer, buildUtilsLayer
}

// Layer ZIP 파일들 생성
tasks.register('buildSpringLayerZip', Zip) {
    dependsOn buildSpringLayer
    archiveFileName = 'spring-layer.zip'
    destinationDirectory = file('build/distributions/layers')
    from 'build/layers/spring'
}

tasks.register('buildDatabaseLayerZip', Zip) {
    dependsOn buildDatabaseLayer
    archiveFileName = 'database-layer.zip'
    destinationDirectory = file('build/distributions/layers')
    from 'build/layers/database'
}

tasks.register('buildExternalLayerZip', Zip) {
    dependsOn buildExternalLayer
    archiveFileName = 'external-layer.zip'
    destinationDirectory = file('build/distributions/layers')
    from 'build/layers/external'
}

tasks.register('buildUtilsLayerZip', Zip) {
    dependsOn buildUtilsLayer
    archiveFileName = 'utils-layer.zip'
    destinationDirectory = file('build/distributions/layers')
    from 'build/layers/utils'
}

tasks.register('buildAllLayerZips') {
    dependsOn buildSpringLayerZip, buildDatabaseLayerZip, buildExternalLayerZip, buildUtilsLayerZip
}

// 내부 모듈들을 별도 디렉토리로 복사
tasks.register('buildInternalModules', Copy) {
    dependsOn ':edukit-core:jar', ':edukit-external:jar', ':edukit-common:jar'

    from project(':edukit-core').jar.archiveFile
    from project(':edukit-external').jar.archiveFile
    from project(':edukit-common').jar.archiveFile
    into 'build/internal-modules/lib'

    doFirst {
        delete 'build/internal-modules'
        mkdir 'build/internal-modules/lib'
    }
}

// 애플리케이션 전용 thin JAR 생성
jar {
    archiveBaseName = 'edukit-batch-app'
    archiveVersion = project.version
    enabled = true

    manifest {
        attributes(
                'Main-Class': 'com.edukit.batch.handler.TeacherVerificationHandler',
                'Implementation-Title': 'EduKit Batch Lambda Function',
                'Implementation-Version': project.version,
                'Lambda-Compatible': 'true'
        )
    }
}

// Lambda 배포용 ZIP 생성
tasks.register('buildLambdaFunctionZip', Zip) {
    dependsOn jar, buildInternalModules
    archiveFileName = 'lambda-function.zip'
    destinationDirectory = file('build/distributions')

    from jar.archiveFile

    from('build/internal-modules') {
        into 'lib'
    }

    into('lib') {
        from configurations.runtimeClasspath
        include '**/aws-lambda-java-*.jar'
    }
}

// 전체 빌드 태스크
tasks.register('buildLambda') {
    dependsOn buildLambdaFunctionZip, buildAllLayerZips
}

// 빌드 정리 태스크
tasks.register('cleanLambda') {
    doLast {
        delete 'build/layers'
        delete 'build/internal-modules'
        delete 'build/distributions'
    }
}

clean.dependsOn cleanLambda

// Spring Boot JAR는 비활성화
bootJar {
    enabled = false
}

// === 디버깅용 태스크들 (개발 시에만 사용) ===

// 의존성 분석 태스크 (로컬 개발 시에만 사용)
tasks.register('analyzeDependencies') {
    onlyIf { !System.getenv('CI') } // CI 환경에서는 실행하지 않음

    doLast {
        def categories = [:]

        println "=== 의존성 Layer 분류 분석 ==="
        configurations.runtimeClasspath.files.each { file ->
            def sizeInMB = file.length() / (1024 * 1024)
            def category = classifyDependency(file.name)

            if (!categories.containsKey(category)) {
                categories[category] = []
            }
            categories[category] << [name: file.name, size: sizeInMB]
        }

        categories.each { category, files ->
            def totalSize = files.sum { it.size }
            println "\n📦 ${category} Layer (${String.format('%.2f', totalSize)} MB):"
            files.sort { -it.size }.take(5).each { file ->
                printf "  %-8.2f MB  %s%n", file.size, file.name
            }
            if (files.size() > 5) {
                println "  ... and ${files.size() - 5} more files"
            }
        }
    }
}

// Layer 크기 검증 태스크 (빌드 실패 방지용)
tasks.register('validateLayerSizes') {
    dependsOn buildAllLayerZips

    doLast {
        def totalSize = 0
        def oversizedLayers = []

        ['spring', 'database', 'external', 'utils'].each { layerName ->
            def layerZip = file("build/distributions/layers/${layerName}-layer.zip")
            if (layerZip.exists()) {
                def layerSizeMB = layerZip.length() / (1024 * 1024)
                totalSize += layerSizeMB

                if (layerSizeMB > 250) {
                    oversizedLayers << "${layerName}: ${String.format('%.1f', layerSizeMB)}MB"
                }
            }
        }

        if (oversizedLayers) {
            throw new GradleException("Layer size limit exceeded: ${oversizedLayers.join(', ')}")
        }

        if (totalSize > 1000) { // 전체 1GB 초과 시 경고
            logger.warn "Total layer size is large: ${String.format('%.1f', totalSize)}MB"
        }
    }
}

buildLambda.finalizedBy validateLayerSizes
