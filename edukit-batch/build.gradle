plugins {
    id 'org.springframework.boot'
}

dependencies {
    implementation(project(':edukit-core')) {
        exclude group: 'io.jsonwebtoken'
        exclude group: 'org.mindrot', module: 'jbcrypt'
    }

    implementation(project(':edukit-external')) {
        exclude group: 'org.springframework.ai'
        exclude group: 'software.amazon.awssdk', module: 's3'
        exclude group: 'io.github.resilience4j'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-redis'
        exclude group: 'io.projectreactor.netty', module: 'reactor-netty-http'
    }

    // AWS Lambda
    implementation 'com.amazonaws:aws-lambda-java-core:1.3.0'
    implementation 'com.amazonaws:aws-lambda-java-events:3.16.1'

    // Logging for CloudWatch
    implementation 'net.logstash.logback:logstash-logback-encoder:8.0'

    // MySQL Connector
    runtimeOnly 'com.mysql:mysql-connector-j'
}

// 의존성 그래프 기반 Layer 분류 함수 (계층적 구조)
def classifyDependency = { fileName ->
    // 1. APPLICATION: 우리 모듈과 Lambda 런타임, MySQL 드라이버 (최상위)
    if (fileName.startsWith('edukit-') ||
            fileName.contains('aws-lambda-java-') ||
            fileName.contains('mysql-connector')) {
        return 'APPLICATION'
    }
    // 2. EXTERNAL_LAYER: External 모듈이 직접 의존하는 것들
    else if (fileName.contains('aws-') && !fileName.contains('lambda') ||
            fileName.contains('ses') ||
            fileName.contains('s3') ||
            fileName.contains('sdk-core') ||
            fileName.contains('apache-client') ||
            fileName.contains('jmespath')) {  // mysql-connector 제거
        return 'EXTERNAL_LAYER'
    }
    // 3. CORE_LAYER: Spring Boot, JPA/Hibernate 등 Core가 직접 의존하는 것들
    else if (fileName.contains('spring-') || fileName.contains('hibernate') || fileName.contains('aspectj') || fileName.contains('byte-buddy') || fileName.contains('jpa') || fileName.contains('jdbc') || fileName.contains('logstash')) {
        return 'CORE_LAYER'
    }
    // 4. BASE_LAYER: 최하단 공통 의존성들 (Jackson, Logback, 기타 유틸)
    else {
        return 'BASE_LAYER'
    }
}

// Base Layer (최하단 공통 의존성) 생성
tasks.register('buildBaseLayer', Copy) {
    from configurations.runtimeClasspath
    into 'build/layers/base-layer/java/lib'

    include { details -> classifyDependency(details.file.name) == 'BASE_LAYER'
    }

    doFirst {
        delete 'build/layers/base-layer'
        mkdir 'build/layers/base-layer/java/lib'
    }
}

// Core Layer (Spring Framework, JPA/Hibernate) 생성
tasks.register('buildCoreLayer', Copy) {
    from configurations.runtimeClasspath
    into 'build/layers/core-layer/java/lib'

    include { details -> classifyDependency(details.file.name) == 'CORE_LAYER'
    }

    doFirst {
        delete 'build/layers/core-layer'
        mkdir 'build/layers/core-layer/java/lib'
    }
}

// External Layer (AWS SDK, MySQL 등) 생성  
tasks.register('buildExternalLayer', Copy) {
    from configurations.runtimeClasspath
    into 'build/layers/external-layer/java/lib'

    include { details -> classifyDependency(details.file.name) == 'EXTERNAL_LAYER'
    }

    doFirst {
        delete 'build/layers/external-layer'
        mkdir 'build/layers/external-layer/java/lib'
    }
}

// 모든 Layer 빌드 (의존성 순서대로: Base -> Core -> External)
tasks.register('buildAllLayers') {
    dependsOn buildBaseLayer, buildCoreLayer, buildExternalLayer
}

// Layer ZIP 파일들 생성 (의존성 순서대로)
tasks.register('buildBaseLayerZip', Zip) {
    dependsOn buildBaseLayer
    archiveFileName = 'base-layer.zip'
    destinationDirectory = file('build/distributions/layers')
    from 'build/layers/base-layer'
}

tasks.register('buildCoreLayerZip', Zip) {
    dependsOn buildCoreLayer
    archiveFileName = 'core-layer.zip'
    destinationDirectory = file('build/distributions/layers')
    from 'build/layers/core-layer'
}

tasks.register('buildExternalLayerZip', Zip) {
    dependsOn buildExternalLayer
    archiveFileName = 'external-layer.zip'
    destinationDirectory = file('build/distributions/layers')
    from 'build/layers/external-layer'
}

tasks.register('buildAllLayerZips') {
    dependsOn buildBaseLayerZip, buildCoreLayerZip, buildExternalLayerZip
}

// 내부 모듈들을 별도 디렉토리로 복사
tasks.register('buildInternalModules', Copy) {
    dependsOn ':edukit-core:jar', ':edukit-external:jar', ':edukit-common:jar'

    from project(':edukit-core').jar.archiveFile
    from project(':edukit-external').jar.archiveFile
    from project(':edukit-common').jar.archiveFile
    into 'build/internal-modules/lib'

    doFirst {
        delete 'build/internal-modules'
        mkdir 'build/internal-modules/lib'
    }
}

// 애플리케이션 전용 thin JAR 생성
jar {
    archiveVersion = project.version
    enabled = true

    manifest {
        attributes('Main-Class': 'com.edukit.batch.handler.TeacherVerificationLambdaHandler',
                'Implementation-Title': 'EduKit Batch Lambda Function',
                'Implementation-Version': project.version,
                'Lambda-Compatible': 'true')
    }
}

// Lambda용 애플리케이션 JAR 생성 (Layer 시스템 사용)
tasks.register('buildLambdaAppJar', Jar) {
    dependsOn buildInternalModules
    archiveBaseName = 'lambda-app'           // 고정된 파일명
    archiveVersion = ''                      // 버전 제거
    archiveClassifier = ''                   // classifier 제거
    destinationDirectory = file('build/distributions')

    // 1. 애플리케이션 클래스들 포함
    from sourceSets.main.output

    // 2. 내부 모듈들을 압축 해제하여 포함
    from fileTree('build/internal-modules/lib').matching {
        include '**/*.jar'
    }.collect { zipTree(it) }

    // 3. APPLICATION으로 분류된 의존성들 포함 (MySQL 드라이버, AWS Lambda 런타임)
    from configurations.runtimeClasspath.findAll { file ->
        classifyDependency(file.name) == 'APPLICATION'
    }.collect { zipTree(it) }

    // 중복 파일 제거
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // META-INF 정리
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    // 메인 클래스 설정 (Lambda에서는 핸들러를 사용하므로 불필요하지만 명시)
    manifest {
        attributes('Lambda-Handler': 'com.edukit.batch.handler.TeacherVerificationLambdaHandler::handleRequest')
    }
}

// Lambda 배포용 ZIP 생성 (JAR 내용을 직접 압축 해제하여 포함)
tasks.register('buildLambdaFunctionZip', Zip) {
    dependsOn buildLambdaAppJar
    archiveFileName = 'lambda-function.zip'
    destinationDirectory = file('build/distributions')

    // JAR 파일의 내용을 압축 해제하여 ZIP에 직접 포함
    from zipTree(buildLambdaAppJar.archiveFile)

    // 중복 파일 제거
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// 전체 빌드 태스크
tasks.register('buildLambda') {
    dependsOn buildLambdaFunctionZip, buildAllLayerZips
}

// 빌드 정리 태스크
tasks.register('cleanLambda') {
    doLast {
        delete 'build/layers'
        delete 'build/internal-modules'
        delete 'build/distributions'
    }
}

clean.dependsOn cleanLambda

// Spring Boot JAR는 비활성화
bootJar {
    archiveFileName = 'edukit-batch.jar'
    enabled = false
}

// === 디버깅용 태스크들 (개발 시에만 사용) ===

// 의존성 분석 태스크 (로컬 개발 시에만 사용)
tasks.register('analyzeDependencies') {
    onlyIf { !System.getenv('CI') } // CI 환경에서는 실행하지 않음

    doLast {
        def categories = [:]

        println "=== 의존성 Layer 분류 분석 ==="
        configurations.runtimeClasspath.files.each { file ->
            def sizeInMB = file.length() / (1024 * 1024)
            def category = classifyDependency(file.name)

            if (!categories.containsKey(category)) {
                categories[category] = []
            }
            categories[category] << [name: file.name, size: sizeInMB]
        }

        categories.each { category, files ->
            def totalSize = files.sum { it.size }
            println "\n📦 ${category} Layer (${String.format('%.2f', totalSize)} MB):"
            files.sort { -it.size }.take(5).each { file -> printf "  %-8.2f MB  %s%n", file.size, file.name
            }
            if (files.size() > 5) {
                println "  ... and ${files.size() - 5} more files"
            }
        }
    }
}

// Layer 크기 검증 태스크 (빌드 실패 방지용)
tasks.register('validateLayerSizes') {
    dependsOn buildAllLayerZips

    doLast {
        def totalSize = 0
        def oversizedLayers = []

        ['base', 'core', 'external'].each { layerName ->
            def layerZip = file("build/distributions/layers/${layerName}-layer.zip")
            if (layerZip.exists()) {
                def layerSizeMB = layerZip.length() / (1024 * 1024)
                totalSize += layerSizeMB

                println "📦 ${layerName}-layer.zip: ${String.format('%.1f', layerSizeMB)} MB"

                if (layerSizeMB > 250) {
                    oversizedLayers << "${layerName}: ${String.format('%.1f', layerSizeMB)}MB"
                }
            }
        }

        println "📊 Total layers size: ${String.format('%.1f', totalSize)} MB"

        if (oversizedLayers) {
            throw new GradleException("Layer size limit exceeded: ${oversizedLayers.join(', ')}")
        }

        if (totalSize > 1000) { // 전체 1GB 초과 시 경고
            logger.warn "Total layer size is large: ${String.format('%.1f', totalSize)}MB"
        }
    }
}

buildLambda.finalizedBy validateLayerSizes
